常用	-	
	


正则表达式	-	
	.	任何单个字符
	[ ]	包含在中括号里面的单个字符
	[^ ]	没有被包含在中括号里面的单个字符
	^	任何一行的开始位置
	$	任何一行的结束为止
	( )	子表达式(捕获组)
	*	出现0次或多次
	+ 	出现1次货多次
	?	出现0次或1次
	\n 第n个标记的子表达式(n 等于数字1至9)
	{m, n}	前面的元素出现至少m次，小于n次
	\d	数字
	\D 非数字字符
	\s	空格字符
	\S	非空格字符
	\w 字母或数字字符（[a-zA-Z0-9]）
	\W 非字母或数字字符(不包括_)
	数字	-	/^\d+$/
	以空格开始的行	-	^[\s]+
	email	-	/[^@]+@[^@]+/
	
	
console	-	
	console.log('输出内容');
	console.log('输出内容：', 5);

	console.info('info');
	console.warn('warn');
	console.error('error');

	console.group('group');
	console.info('width');
	console.groupEnd('group end');

	var person = {
		"carl": {"age":30, "sex" :  "man"},
		"yc":{"age" : 28, "sex" : "man"}
	};
	console.table(person);

	console.assert(1 > 2, "judge false, 1 not more than 2 ");

	
断点调试	-	
	F12 > Sources > 选择左边js文件 > 点击右边文件行号
	程序中写debugger; 

	
try catch finally	-	
	try{
	}catch(e){
		console.log(e.name, e.message);
	}finally{
	}

	
throw new Error("invalid number") 	-	
	try{
		var num = "a";
		if(isNaN(num)){
			throw new Error("invalid number");
		}
	}catch{
		console.log(e.name, e.message); // 显示给开发人员
		return 'this is invalid number';// 显示给用户
	}
	
	
可折叠面板	-	
	html5: <details>和<summary>
	liteAccordion和zAccordion
	jquery ui
	bootstrap

	html:
	<ul class="accordion">
		<li>
			<button class="accordion-control">Class1</button>
			<div class="accordion-panel">Panel1</div>
		</li>
		<li>
			<button class="accordion-control">Class2</button>
			<div class="accordion-panel">Panel2</div>
		</li>
	</ul>
	css:
	.accordion-panel{
		display: none;
	}
	js:
	$('.accordion').on('click', '.accordion-control', function(e){
		e.preventDefault();
		$(this)
		 .next('.accordion-panel') // 选择下一个class属性等于accordion-panel的元素
		 .not(':animated') // 没有处于动画中,防止多次动画
		 .slideToggle();// 显示就隐藏，隐藏就显示
	})
	
	
动画	-	
	.show() 等价于
	.animate({
		height: 'show',
		paddingTop: 'show',
		paddingBottom: 'show',
		marginTop: 'show',
		marginBottom: 'show'
	}); 

	.hide(), .toggle()
	 
	$this.is('.active');
	$this.find('li.active');
	$this.removeClass('.active');
	$this.parent().addClass(.active);
	$this.attr('href');
	$this.empty();
	$this.on('resize', function(){});
	$this.off('resize', function(){});
	var id = this.hash;
 
 
创建模式窗口	-	
	 js:
	 var modal = (function(){
		var $window = $(window);
		var $modal = $('<div class="modal"/>');
		var $content = $('<div class="modal-content"/>');
		var $close = $('<button role="button" class="modal-close">close</button>');
		
		$modal.append($content, $close);
		$close.on('click', function(e){
			e.preventDefault();
			modal.close();
		})
	
		return {
			center: function(){
				var top = Math.max($window.heigth() - $modal.outerHeigth(), 0) / 2;
				var left = Math.max($window.width() - $modal.outerWidth(), 0) / 2;
				
				$modal.css({
					top : top + $window.scrollTop(),
					left : left + $window.scrollLeft()
				});
			},
			open: function(settings){
				$content.empty().append(settings.content);
				$modal.css({
					width: settings.width || 'auto',
					heigth : settings.heigth || 'auto'
				}).appendTo('body');
				
				modal.center();
				$(window).on('resize', modal.center);
			},
			close: function(){
				$content.empty();
				$modal.detach();// 仅仅显示效果没有，但对象还在内存中， remove()是完全移除
				$(window).off('resize', modal.center);
			}
		}
	
	}());
 
 
jQuery插件开发	-	
	(function($){
	$.fn.accordion = function(options){
		options = options || {"speed" : 500};
		$('.accordion').on('click', '.accordion-control', function(e){
			e.preventDefault();
			$(this)
			 .next('.accordion-panel') // 选择下一个class属性等于accordion-panel的元素
			 .not(':animated') // 没有处于动画中,防止多次动画
			 .slideToggle(options.speed);// 显示就隐藏，隐藏就显示
		})
		return this;
	}
	})(jQuery);

	$(.menu).accordion({"speed" : 500});

属性	-	
事件	-	
方法	-	

函数	-	
	匿名函数：没有名字的函数
	var area = function(width, height){
		return width * height;
	}
	var size = area(3, 4);
 
	函数声明
	function area(width, heigth){
		return width * height;
	}
	var size = area(3,4);
	 
	立即调用函数：没有函数名称，只需运行一次的代码
	var area = (function(){
		var width = 3;
		var height = 2;
		return width * height;
	}());
	
	构造函数：
	var hotel = new Object();
	hotel.name = 'hname';
	hotel.rooms = 40;
	hotel.check = function(){
		return this.rooms > 0;
	};
	hotel.check();

	构造函数2：
	function Hotel(name, rooms){
		this.name = name;
		this.rooms = rooms;
		this.check = function(){
			return rooms > 0;
		}
	};
	var hotel1 = new Hotel('name1', 30);
	var hotel2 = new Hotel('name2',40);
	hotel1.check();
	hotel2.check();
 
对象	-	
	字面量：
	var hotel = {
		name: 'hname',
		rooms: 40,
		check: function(){
			return this.rooms > 0;	
		}
	};
	var hotelName = hotel.name;或 hotel['name']
	var checked = hotle.check();
	
	字面量2：
	var hotel = {};
	hotel.name = 'hname',
	hotel.rooms = 40,
	hotel.check = function(){
		return this.rooms > 0;
	}
	
this关键字	-	
	function windowSize(){
	var width = this.innerWidth;// this = windows
	}

	var width = 600;// 全局变量为windows对象属性
	var showWidth = function(){
		 return this.width;// this = windows
	}

	var obj = function(){
		 width: 300,
		 getWidth: function(){
				return this.width;// this = obj 
		   或   return obj.width;
		}
	}
	
	var width = 600;
	var shape = {width:300};
	var showWidth = function(){
		return this.width;// this == shape
	}
	shape.getWidth = showWidth;// showWidth方法传递给shape的getWidth方法
	shape.getWidth();

数据结构	-	
	字符串：
	var str = 'string';

	数组：
	var arr = ['a','b','c']; 或 new Array()

	对象: var hotel = {name:'hname',rooms:40};

	数组对象组合：
	var hotel = {name:'hname',rooms:[301,302,303]};
	hotel.rooms[0];

	var hotelList = [{name: 'hname1'},{name:'hname2'}];
	hotelList[0].name;


scroll	-	
	滚动条事件
	scrollTop：
		获取或设置垂直滚动条位置
	scrollLeft：
		获取或设置水平滚动条位置
offset	-	
	获取或设置元素坐标
	$(document).ready(function(){
	  $("button").click(function(){
		$("p").offset({top: 100, left: 0});
		$("p").offset(function(n,c){// c表示oldvalue
			newPos=new Object();
			newPos.left=c.left+100;
			newPos.top=c.top+100;
			return newPos;
		});
	  });
	});
	
split	-	
	var arr = string.split(',');
	
each	-	
	$.each(arr, function(index, data){
		
	});	

find	-	
	$("#div").find('a.seed[data-type="tcr"]');
 
 hasClass addClass removeClass	-
	
 insertBefore()	-	
	$('p').insertBefore($('div')) // p标签在div标签前面
 
 
 
 
 
 
 
 
 
 
 